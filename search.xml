<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Xilinx VC709 PCIe 配置与调试</title>
      <link href="/blog/2024/05/17/xilinx-vc709-pcie-pei-zhi-yu-diao-shi/"/>
      <url>/blog/2024/05/17/xilinx-vc709-pcie-pei-zhi-yu-diao-shi/</url>
      
        <content type="html"><![CDATA[<p>项目组之前一直在 VC709 上做 FPGA 原型验证，之前一般用网口或者 FMC 往片上搬数据。但因为之前在阿里实习的时候用 Xilinx Alveo 系列的加速卡，对 PCIe 做 CPU-FPGA 系统比较熟悉，所以最近一期项目打算尝试一下用 PCIe 来做数据搬移。这样的好处是可以像 Alveo 系列加速卡一样做一个完整的 CPU-FPGA 系统，将整个应用的流程全部在一台机器里完成，十分优雅。</p><p><img src="/blog/2024/05/17/xilinx-vc709-pcie-pei-zhi-yu-diao-shi/computer.jpeg"></p><p>这次拿了一台退休下来的台式机来搞这个事情，配置 AMD 2700X + Nvidia GTX 1660 Super。换了个新机箱（大一点，方便插 FPGA 的外设），还加了条 PCIe 延长线把 FPGA 做成竖插的（板面朝外，方便调试）。 以下记录一些配置和调试 PCIe 的过程。</p><h2 id="流程总览"><a href="#流程总览" class="headerlink" title="流程总览"></a>流程总览</h2><ol><li>在 FPGA 上烧录带有 PCIe 接口 IP 的比特流<ul><li>热重启（不断电重启）</li><li>此时 <code>lspci</code> 应当可以识别到设备</li></ul></li><li>安装 driver：<a href="https://github.com/Xilinx/dma_ip_drivers">https://github.com/Xilinx/dma_ip_drivers</a><ul><li>此时可以成功操作设备</li><li>可以使用 Xilinx 提供的脚本进行验证</li></ul></li></ol><h2 id="一个简单的-Demo"><a href="#一个简单的-Demo" class="headerlink" title="一个简单的 Demo"></a>一个简单的 Demo</h2><h3 id="Step-1：FPGA-设计"><a href="#Step-1：FPGA-设计" class="headerlink" title="Step 1：FPGA 设计"></a>Step 1：FPGA 设计</h3><p>按照上面的流程，我们先要给 FPGA 上烧录一个带有 PCIe 接口的设计。我们这里以一个最简单的功能为例：PCIe 直接访问 FPGA 板卡上的 DDR3 Memory。</p><p>使用 XDMA（DMA&#x2F;Bridge Subsystem for PCI Express）作为接口 IP，内部 AXI 总线连接到 MIG（Memory Interface Generator）上，然后以 DDR3 的形式输出，连到板卡上的 DRAM。XDMA 后面会更详细介绍，这里可以简单认为是一个 PCIe 转 AXI 的接口模块。另外，连接 XDMA 和 MIG 时还需要一些时钟和复位的调整，这里不多赘述。</p><p>如果在创建工程时选择了正确的 Board，这里甚至不需要自己写 XDC 约束和管脚约束，因为 Board 信息已经被集成在 Vivado 工具里了，它会自动生成接口名称并且映射到相应管脚上。有一说一，这个功能真的很方便，大赞。</p><p><img src="/blog/2024/05/17/xilinx-vc709-pcie-pei-zhi-yu-diao-shi/fpga.png"></p><p>实际应用场景中，FPGA 上的设计（比如一个加速器核）也需要访问从 PCIe 发过来的数据，所以可以做成顶层接口为 AXI 的加速器，然后加速器和 XDMA 经过一个 AXI Interconnect 连到 MIG 上。当然，也可以不用 DRAM，直接 XDMA 将 PCIe 转 AXI 之后直接写入加速器核里面的 SRAM&#x2F;BRAM。</p><h3 id="Step-2：安装-driver"><a href="#Step-2：安装-driver" class="headerlink" title="Step 2：安装 driver"></a>Step 2：安装 driver</h3><p>在这里 <a href="https://github.com/Xilinx/dma_ip_drivers">https://github.com/Xilinx/dma_ip_drivers</a> 下载官方的 XDMA 驱动程序，进入 <code>XDMA/linux-kernel</code> 文件夹，参照里面的 README 进行环境配置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> xdma$ <span class="token function">make</span> <span class="token function">install</span>$ modprobe xdma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果报错 Error: xxx: Operation not permitted，大概率是因为开了 SecureBoot 的原因。使用 <code>mokutil --sb-state</code> 可以检查是否开启了 SecureBoot，如果开启了则需要重启服务器，在 BIOS 里面将 SecureBoot 禁用。</p><p>另外，还需要注意这个驱动是和系统版本（小版本）绑定的，所以需要把系统的自动更新也关掉。</p><h3 id="Step-3：热重启"><a href="#Step-3：热重启" class="headerlink" title="Step 3：热重启"></a>Step 3：热重启</h3><p>将程序烧录至板卡，且安装完驱动程序后，热重启服务器。这样一方面刚刚烧上去的 FPGA 程序不会因为掉电而丢失，另一方面 CPU 重启，操作系统会重新加载内核中的驱动程序，并且重新扫描 PCIe 设备。此时 <code>lspci</code> 应当可以看到 FPGA 板卡。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lspci <span class="token operator">|</span> <span class="token function">grep</span> Xilinx0a:00.0 Serial controller: Xilinx Corporation FPGA Card XC7VX690T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Step-4：检查上述步骤是否正确"><a href="#Step-4：检查上述步骤是否正确" class="headerlink" title="Step 4：检查上述步骤是否正确"></a>Step 4：检查上述步骤是否正确</h3><ol><li><code>lspci | grep Xilinx</code>：应当可以看到 FPGA 板卡作为 PCIe 设备</li><li><code>lsmod | grep xdma</code>：应当可以看到 XDMA 驱动被加载</li><li><code>ls /dev/xdma*</code>：应当可以看到 XDMA 设备</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /dev/xdma*/dev/xdma0_c2h_0     /dev/xdma0_events_1   /dev/xdma0_h2c_3/dev/xdma0_c2h_1     /dev/xdma0_events_2   /dev/xdma0_user/dev/xdma0_c2h_2     /dev/xdma0_events_3   /dev/xdma0_xvc/dev/xdma0_c2h_3     /dev/xdma0_h2c_0/dev/xdma0_control   /dev/xdma0_h2c_1/dev/xdma0_events_0  /dev/xdma0_h2c_2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>h2c</code> 和 <code>c2h</code> 是 CPU 和 FPGA 之间相互传输的通道（c &#x3D; card，h &#x3D; host）；<code>user</code> 是 AXI-Lite 写寄存器的通道；<code>events</code> 是用户中断。所有这些通道都需要在 XDMA IP 中进行配置了才会相应出现。</p><h3 id="Step-5：操作-FPGA-设备"><a href="#Step-5：操作-FPGA-设备" class="headerlink" title="Step 5：操作 FPGA 设备"></a>Step 5：操作 FPGA 设备</h3><p>进入 <code>tools</code> 文件夹，make；接着进入 <code>tests</code> 文件夹，make；然后跑测试脚本 <code>run_test.sh</code> 即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./run_test.shInfo: Number of enabled h2c channels <span class="token operator">=</span> <span class="token number">4</span>Info: Number of enabled c2h channels <span class="token operator">=</span> <span class="token number">4</span>Info: The PCIe DMA core is memory mapped.Info: Running PCIe DMA memory mapped <span class="token function">write</span> <span class="token builtin class-name">read</span> <span class="token builtin class-name">test</span>transfer size:  <span class="token number">1024</span>, count: <span class="token number">1</span>Info: Writing to h2c channel <span class="token number">0</span> at address offset <span class="token number">0</span>.Info: Writing to h2c channel <span class="token number">1</span> at address offset <span class="token number">1024</span>.Info: Writing to h2c channel <span class="token number">2</span> at address offset <span class="token number">2048</span>.Info: Writing to h2c channel <span class="token number">3</span> at address offset <span class="token number">3072</span>.Info: Wait <span class="token keyword">for</span> current transactions to complete./dev/xdma0_h2c_1 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">31.390821</span>/dev/xdma0_h2c_0 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">38.936840</span>/dev/xdma0_h2c_2 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">41.015781</span>/dev/xdma0_h2c_3 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">38.951653</span>Info: Reading from c2h channel <span class="token number">0</span> at  address offset <span class="token number">0</span>.Info: Reading from c2h channel <span class="token number">1</span> at  address offset <span class="token number">1024</span>.Info: Reading from c2h channel <span class="token number">2</span> at  address offset <span class="token number">2048</span>.Info: Reading from c2h channel <span class="token number">3</span> at  address offset <span class="token number">3072</span>.Info: Wait <span class="token keyword">for</span> current transactions to complete./dev/xdma0_c2h_0 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">31.209045</span>/dev/xdma0_c2h_1 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">36.141602</span>/dev/xdma0_c2h_2 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">33.600208</span>/dev/xdma0_c2h_3 ** Average BW <span class="token operator">=</span> <span class="token number">1024</span>, <span class="token number">32.854210</span>Info: Checking data integrity.Info: Data check passed <span class="token keyword">for</span> address range  <span class="token number">0</span> - <span class="token number">1024</span>Info: Data check passed <span class="token keyword">for</span> address range  <span class="token number">1024</span> - <span class="token number">2048</span>Info: Data check passed <span class="token keyword">for</span> address range  <span class="token number">2048</span> - <span class="token number">3072</span>Info: Data check passed <span class="token keyword">for</span> address range  <span class="token number">3072</span> - <span class="token number">4096</span>Info: All PCIe DMA memory mapped tests passed.Info: All tests <span class="token keyword">in</span> run_tests.sh passed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-N：之后…"><a href="#Step-N：之后…" class="headerlink" title="Step N：之后…"></a>Step N：之后…</h3><p>到此为之，FPGA 已经正确地作为 PCIe 设备挂载在服务器里，后面就可以实现自己的功能了。</p><ul><li>在硬件侧，通过 AXI 接口交互即可。</li><li>在软件侧，可以参照 <code>tools</code> 里的 <code>dma_from_device.c</code>、<code>dma_to_device.c</code> 和 <code>reg_rw.c</code> 进行软件代码的编写。前两者是传输大块的内存数据用的，后者是传输控制和寄存器信息用的。</li><li>或者，可以尝试使用我们的头文件（如下）。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token comment">/** * @brief                      read data from device to local memory (buffer) *  * @param      dev_fd          device file descriptor * @param      addr            source address in device * @param      buffer          buffer base pointer * @param      size            data size * @return     int             0 = success, -1 = failed */</span><span class="token keyword">int</span> <span class="token function">memcpy_d2h</span> <span class="token punctuation">(</span><span class="token keyword">int</span> dev_fd<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> addr <span class="token operator">!=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token comment">// seek</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                  <span class="token comment">// seek failed</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">!=</span> <span class="token function">read</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">)</span>       <span class="token comment">// read device to buffer</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                  <span class="token comment">// read failed</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief                      wrtie data from local memory (buffer) to device *  * @param      dev_fd          device file descriptor * @param      addr            target address in device * @param      buffer          buffer base pointer * @param      size            data size * @return     int             0 = success, -1 = failed */</span><span class="token keyword">int</span> <span class="token function">memcpy_h2d</span> <span class="token punctuation">(</span><span class="token keyword">int</span> dev_fd<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> addr <span class="token operator">!=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token comment">// seek</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                  <span class="token comment">// seek failed</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">!=</span> <span class="token function">write</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token comment">// write device from buffer</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                  <span class="token comment">// write failed</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief                      map device address to process memory *  * @param      dev_fd          device file descriptor * @param      addr            address in device * @return     void*           pointer to device memory location */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev_fd<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> addr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">off_t</span> pagesize<span class="token punctuation">,</span> aligned<span class="token punctuation">,</span> offset<span class="token punctuation">;</span>    pagesize <span class="token operator">=</span> <span class="token function">sysconf</span><span class="token punctuation">(</span>_SC_PAGESIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    aligned <span class="token operator">=</span> addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>pagesize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    offset <span class="token operator">=</span> addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pagesize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>maddr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> dev_fd<span class="token punctuation">,</span> aligned<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maddr <span class="token operator">+</span> offset<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三种-PCIe-接口-IP"><a href="#三种-PCIe-接口-IP" class="headerlink" title="三种 PCIe 接口 IP"></a>三种 PCIe 接口 IP</h2><p>我们使用 PCIe 的主要目标是实现 CPU Host 和 FPGA Device 之间的数据迁移。PCIe 接口 IP 的职责是：在 FPGA 端，打包&#x2F;解包需要发送&#x2F;接收的数据，并按照 PCIe 协议的格式发送&#x2F;接收。因此，在讨论 PCIe 接口 IP 时，我们需要关注以下几个信息：</p><ol><li>在 FPGA 端，写入和读出 PCIe 接口 IP 的数据接口是什么形式（例如 SRAM &#x2F; FIFO &#x2F; AXI &#x2F; Stream &#x2F; …）</li><li>在 CPU 端，需要什么样的操作系统支持（例如 driver），软件提供哪些 API</li><li>在 FPGA 和 CPU 之间，数据请求的方向是什么，哪一方是 master，哪一方是 slave</li></ol><p>虽然我们在这里使用的是 CPU-FPGA 系统，但实际上也可以实现 FPGA-FPGA 的 PCIe 通信。我们重点关注上述几个信息，以下是一些可选的 PCIe 接口 IP：</p><ul><li>[PG195] DMA&#x2F;Bridge Subsystem for PCI Express（通常被称为 XDMA）</li><li>[PG055] AXI Memory Mapped to PCI Express</li><li>[PG054] 7 Series Integrated Block for PCI Express</li></ul><p>这三者的功能和封装层级有所不同，使用复杂度从上到下逐渐增加，需要根据设计需求进行选择。<a href="https://www.cnblogs.com/yuzeren48/p/13752351.html">这个博客的 Q&amp;A 中</a>介绍了这三种接口 IP 的差异，我们将在下面对关键信息进行汇总介绍。</p><h3 id="DMA-Bridge-Subsystem-for-PCI-Express"><a href="#DMA-Bridge-Subsystem-for-PCI-Express" class="headerlink" title="DMA&#x2F;Bridge Subsystem for PCI Express"></a>DMA&#x2F;Bridge Subsystem for PCI Express</h3><p>XDMA 可以称得上是“傻瓜式”的 PCIe 接口 IP，即使是软件工程师或者对 PCIe 协议不太熟悉的硬件工程师也能<strong>快速上手使用</strong>。XDMA 的<strong>性能也不错</strong>，实测大约是满带宽的 70%-80%。不过，需要注意的是 XDMA <strong>只支持 CPU 作为主机，FPGA 作为从机</strong>——也就是说所有读写请求都必须由 CPU 主动发出，FPGA 没有权限主动读写 CPU 的数据。</p><ul><li>在 FPGA 端，XDMA 是一个高度包装的 PCIe 转 AXI（包括 AXI-MM，AXI-Stream 和 AXI-Lite）接口模块。</li><li>在 CPU 端，Xilinx 提供了开源的驱动程序（以 Linux kernel 的形式）。PCIe 设备在 Linux 操作系统中会以文件的形式存在，可以使用 C 的文件操作通过读写文件的语义实现 PCIe 通信。</li></ul><h3 id="AXI-Memory-Mapped-to-PCI-Express"><a href="#AXI-Memory-Mapped-to-PCI-Express" class="headerlink" title="AXI Memory Mapped to PCI Express"></a>AXI Memory Mapped to PCI Express</h3><p>相对于 XDMA，PG055 的功能更强大，当使用它作为 PCIe 接口时，FPGA 可以作为主机也可以作为从机。它主要用于 device 需要主动访问 host 内存的情况，或者不是 CPU-FPGA 而是 FPGA-FPGA 或 FPGA-其它PCIe设备的系统。在使用这个 IP 的时候需要格外注意不要在主动访问其他设备的时候把对方搞炸了。</p><ul><li>在 FPGA 端，它和 XDMA 类似，也是 AXI 接口，但只有 AXI-MM</li><li>在 CPU 端，它没有官方的 driver（因为支持 device 主动访问 host，所以是一个很客制化的 driver，自然没有官方版本），所以软件开发相对麻烦，需要自己写 driver 并且自己搞软件 API。</li></ul><h3 id="7-Series-Integrated-Block-for-PCI-Express"><a href="#7-Series-Integrated-Block-for-PCI-Express" class="headerlink" title="7 Series Integrated Block for PCI Express"></a>7 Series Integrated Block for PCI Express</h3><p>总体而言，PG054 是一个更底层的 IP，适合于非常熟悉 PCIe 协议并且有深度优化需求的场合。</p><ul><li>在 FPGA 端，用户需要将数据打包成 PCIe 的事务层数据包，然后输入到这个 IP 中。类似地，从 IP 读出的也是一个个数据包，需要自行解包。</li><li>在 CPU 端，同样没有驱动程序，需要自行编写。但是和 PG055 类似，自由度很高，可以适用于多种场景，并且不限制主从。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> PCIe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 个人博客的搭建和配置</title>
      <link href="/blog/2024/05/11/hexo-ge-ren-bo-ke-de-da-jian-he-pei-zhi/"/>
      <url>/blog/2024/05/11/hexo-ge-ren-bo-ke-de-da-jian-he-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>最近打算开个博客，记录一下生活和科研项目中的各种故事。第一篇就从博客的搭建记录起吧。</p><p>去年（2023年）五月份的时候和淼老师出去旅游，临回来的前一天在讨论大语言模型很火，要不要给自己开一个博客站点，记录一些生活中的事情，这样以后可以用来训练自己的数字生命（x 。于是回学校之后简单调研了一把，然后用 Hexo + GitHub Pages 尝试搭了一个。但是最终只调了调版面、写了个 helloworld，后面就闲置了。</p><p>这两天正好在做 Xilinx FPGA 的适配和开发，平常一般都把这些技术文档记在 notion 里，今天突发奇想，打算重新把博客从历史的垃圾堆里清理出来。不巧的是，当时的源码似乎随着被我重装的旧电脑一并消散了。四处搜寻无果，英雄只得重新来过。但万幸的是，至少之前䠀过一遍流程，现在多少还有点印象。</p><p>想想也奇妙，去年是五一过后（看 commit 是 5.10）心血来潮搞的博客，今年也是五一假期刚回来一周（现在是 5.11）。博士的第二年印象里过得很快，就像建这个博客小站好像还是不久前的事情。</p><p>猎户座悬臂边缘的蓝色行星又真切地绕着它的恒星完成了一圈公转，我们好似刻舟求剑一般回到了相似的位置，生活在相似却又不同地继续着。<strong>令我知道此刻非彼时的是：晚上刚和淼老师做完 SPA，现在很爽。</strong></p><p>闲言止于此，后面聊些技术话题。最近的技术活还蛮多，要把博客小站 setup 起来，要把 Xilinx VC709 的 PCIe 调通，为后面芯片的 FPGA 原型做准备，最近找老板买的 Xilinx Alveo U55C 加速卡也到货了，要和 IT 老师一块把环境搭好测好。这两天有空的时候估计会把这些的流程和踩坑都写点东西记录下来。</p><h2 id="Hexo-安装-Matery-主题配置"><a href="#Hexo-安装-Matery-主题配置" class="headerlink" title="Hexo 安装 + Matery 主题配置"></a>Hexo 安装 + Matery 主题配置</h2><p>Hexo 版本：7.2.0</p><p><a href="https://hexo.io/">Hexo</a> 可以认为是一个快速部署个人博客站点的框架，安装好 node&#x2F;npm 之后照着官网的流程（其实一个命令就好）就可以装好。使用 Hexo 搭建个人博客的方式也相当简单：</p><ul><li><code>hexo init &lt;dir&gt;</code>：新建 hexo 博客文件夹，会自动从 hexo 的 repo 里面把基础的文件 clone 下来</li><li><code>hexo server</code> &#x2F; <code>hexo s</code>：本地启动博客站点，默认地址是 localhost:4000</li><li><code>hexo new</code> &#x2F; <code>hexo n</code>：新建博客文章</li><li><code>hexo deploy</code> &#x2F; <code>hexo d</code>：部署博客站点至云端（比如 GitHub Pages）</li></ul><h3 id="Matery-主题"><a href="#Matery-主题" class="headerlink" title="Matery 主题"></a>Matery 主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a> 主题是一个 material design 风格的 Hexo 博客主题，详见其作者闪烁飞狐的 <a href="https://github.com/blinkfox/hexo-theme-matery">GitHub 仓库</a>。</p><p>我这里安装和配置 Hexo + Matery 的操作参照<a href="https://www.cnblogs.com/jijunhao/p/16972921.html">这篇博客</a>。</p><p>首先，将相关文件下载 &#x2F; clone 到 themes 文件夹下。然后，在根目录的 <code>_config.yml</code> 中进行如下配置：</p><ul><li>把主题设置为 hexo-matery-theme：<code>theme: hexo-theme-matery</code></li><li>把 url 改成自己的域名（这里白嫖一下 GitHub）：<code>url: http://yc-vertex.github.io/blog</code></li><li>把最上面 site 的相关信息改称自己的信息</li><li>为了更好的显示，把 <code>language</code> 改成 <code>zh-CN</code>；把两个 <code>per_page</code> 改成12（6的倍数）</li></ul><h3 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板"></a>新建文章模板</h3><p>font-matter 是 json &#x2F; yaml 文件顶部以 <code>---</code> 分割的一段代码，定义文件中可以使用的若干个变量。在 Hexo 中的文件中，这些变量定义了文章的标题、日期、作者等信息。为了新建文章方便，可以修改 <code>scaffolds/post.md</code>，这样后续新建文章的时候 font-matter 就可以按照模板自动生成（当然后续也可以再手动修改）。这些 font-matter 具体代表什么意思、需要如何修改，请参见这个 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">README</a>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Yichi "VerTeX" Zhang<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>如果文章名是中文，那么 Hexo 生成的链接中也会有中文，这是我们所不希望的。</p><p>安装中文转拼音的插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-permalink-pinyin <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并修改根目录下的 <code>_config.yml</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="其他配置和插件安装"><a href="#其他配置和插件安装" class="headerlink" title="其他配置和插件安装"></a>其他配置和插件安装</h3><p>还有很多有用的插件可以安装，比如文章搜索、字数统计、代码高亮等等。作者闪烁飞狐在 hexo-theme-matery 仓库的 README 里面已经写的很详细了，这里就不过多赘述。</p><p>对于 Matery 主题的更详细配置，可以更改主题的配置文件 <code>themes/hexo-theme-matery/_config.yml</code>（注意不是根目录下的配置文件）。这里可以修改诸如首页按钮、个人简介、滚动副标题、社交媒体链接、是否现实置顶文章等各种各样的设置，并且注释写的很详细易懂。</p><p>更细致的，对于主题的样式和排版配置，可以修改 <code>themes/hexo-theme-matery/layout</code> 中的文件。例如 <code>_partial/social-link.ejs</code> 中就可以自定义鼠标悬停在社交媒体小 logo 上时显示的提示文字。</p><p><del>不过目前看起来，代码块的显示似乎还有点问题，不知道发布到公网之后会不会就变好了。</del>（见下）</p><h3 id="关于代码块的配置"><a href="#关于代码块的配置" class="headerlink" title="关于代码块的配置"></a>关于代码块的配置</h3><p>目前看起来的情况是 Matery Theme 中 <code>source/libs/prism/prism.min.css</code> 没有被加载，怀疑是 Hexo 和 Matery Theme 都尝试加载 prismjs 可能会产生冲突（从现象看是这样的，但是具体原因我也不清楚）。</p><p><strong>我的解决方案是这样 hack 一下：把 <code>prism.min.css</code> 里的内容拷贝到 <code>source/css/my.css</code> 里。</strong></p><p>配置文件里定义了 <code>my.css</code> 和 <code>prism.min.css</code> 都需要加载，但是从结果上来看 <code>my.css</code> 确实加载了，而 <code>prism.min.css</code> 却没有。目前仍不知道为什么，不过好消息是至少现在能正常显示代码块了。</p><h2 id="发布至-GitHub-Pages"><a href="#发布至-GitHub-Pages" class="headerlink" title="发布至 GitHub Pages"></a>发布至 GitHub Pages</h2><p>首先，需要创建一个启用 GitHub Pages 的 repo，具体方法可以参照<a href="https://pages.github.com/">官方教程</a>。</p><p>在 Hexo 这边，需要现安装部署插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改 <code>_config.yml</code> 中 deployment 相关的设置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YC<span class="token punctuation">-</span>Vertex/blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每次部署前，按照 clean → generate → deploy 的顺序进行操作即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g <span class="token parameter variable">-d</span> <span class="token comment"># hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一年后重见 Hexo 和 Matery Theme，虽然大体上还是老朋友，但是从很多细节都能看出它们都在朝着更好的方向发展。Hexo 现在更新至 7.x 版本，内嵌的代码高亮支持比一年前好配置了很多，尤记得当时还需要装一些插件什么的，现在直接改配置文件就可以了。Matery 主题里面也加入了很多新的功能，比如不蒜子的访问次数统计，主题的可配置选项也便多了，每个人现在可以调教出更有自己风格的博客小站。</p><p>这么想想，生活亦如是：虽然自己还是一年前的自己，还在做一年前的课题，还在玩一年前的技术。但是这个过程中，既有明面上被 ASPLOS 24 收录的第一篇论文，还有背后我学到的知识、技术，交到的朋友，经历的那么多故事。一年说长不长，但也长到足够为我们的生命添上一捧新的薪火。</p><p><strong>祝福我们都有光明的未来。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2024/05/11/hello-world/"/>
      <url>/blog/2024/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
